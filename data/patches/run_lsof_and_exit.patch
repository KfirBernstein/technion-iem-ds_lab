diff --git a/Makefile b/Makefile
index 9192b12..8ed0503 100644
--- a/Makefile
+++ b/Makefile
@@ -182,6 +182,7 @@ UPROGS=\
 	_wc\
 	_lsof\
 	_zombie\
+	_open_files
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/init.c b/init.c
index 046b551..e5f235d 100644
--- a/init.c
+++ b/init.c
@@ -4,34 +4,67 @@
 #include "stat.h"
 #include "user.h"
 #include "fcntl.h"
+#define SINGLESHOT
 
 char *argv[] = { "sh", 0 };
 
 int
 main(void)
 {
-  int pid, wpid;
+    int pid, wpid;
 
   if(open("console", O_RDWR) < 0){
-    mknod("console", 1, 1);
-    open("console", O_RDWR);
-  }
-  dup(0);  // stdout
-  dup(0);  // stderr
-
-  for(;;){
-    printf(1, "init: starting sh\n");
+        mknod("console", 1, 1);
+        open("console", O_RDWR);
+    }
+    dup(0);  // stdout
+    dup(0);  // stderr
+
+#ifdef SINGLESHOT
+
+    // exec the tester and don't wait for it
     pid = fork();
-    if(pid < 0){
-      printf(1, "init: fork failed\n");
-      exit();
+    if (pid < 0) {
+        printf(1, "init: fork failed\n");
+        exit();
     }
-    if(pid == 0){
-      exec("sh", argv);
-      printf(1, "init: exec sh failed\n");
-      exit();
+    if (pid == 0) {
+        exec("open_files", argv);
+        printf(1, "init: exec sh failed\n");
+        exit();
+    }
+
+    sleep(100);
+    // exec the lsof
+    pid = fork();
+    if (pid < 0) {
+        printf(1, "init: fork failed\n");
+        exit();
+    }
+    if (pid == 0) {
+        exec("lsof", argv);
+        printf(1, "init: exec sh failed\n");
+        exit();
     }
+    wait();
+    wait();
+    halt();
+#endif
+
+
+    for(;;){
+        printf(1, "init: starting sh\n");
+        pid = fork();
+    if(pid < 0){
+            printf(1, "init: fork failed\n");
+            exit();
+        }
+    if(pid == 0){
+            exec("sh", argv);
+            printf(1, "init: exec sh failed\n");
+            exit();
+        }
     while((wpid=wait()) >= 0 && wpid != pid)
-      printf(1, "zombie!\n");
-  }
+            printf(1, "zombie!\n");
+    }
 }
diff --git a/open_files.c b/open_files.c
new file mode 100644
index 0000000..e2adf2c
--- /dev/null
+++ b/open_files.c
@@ -0,0 +1,34 @@
+#include "types.h"
+#include "user.h"
+
+#include "types.h"
+#include "stat.h"
+#include "fcntl.h"
+
+int main(int ac, char **av) {
+    int num_ticks = 200;
+    char name[] = "dummy__";
+    //sleep(num_ticks); // we pipe to lsof, so give the shell some time to create the pipe, so we have determinstic fd ordering
+    for (int i = 0; i < 4; i++) {
+        name[5] = '0' + i;
+        printf(1, "opening file %s with mode %d\n", name, O_WRONLY | O_CREATE);
+        int fd = open(name, O_WRONLY | O_CREATE);
+        if (fd < 0) {
+            printf(2, "failed opening file\n");
+            exit();
+        }
+    }
+    for (int i = 0; i < 3; i++) {
+        name[5] = '0' + i;
+        printf(1, "opening file %d with mode %d\n", i, O_RDONLY);
+        int fd = open(name, O_RDONLY);
+        if (fd < 0) {
+            printf(2, "failed opening file\n");
+            exit();
+        }
+    }
+
+
+    sleep(num_ticks);
+    exit();
+}
